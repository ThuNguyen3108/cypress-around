/// <reference types="cypress" />

beforeEach('Open application', () => {
  cy.visit('/')
})

it.only('datepickers', () => {
  // M·ªü menu Forms -> Datepicker
  cy.contains('Forms').click()
  cy.contains('Datepicker').click()

  // üëâ H√†m ch·ªçn ng√†y trong l·ªãch
  function selectDateFromCurrentDay(daysFromToday) {
    // T·∫°o ng√†y trong t∆∞∆°ng lai
    let date = new Date()
    date.setDate(date.getDate() + daysFromToday)

    let futureDay = date.getDate()
    let futureMonthLong = date.toLocaleDateString('en-US', { month: 'long' })
    let futureMonthShort = date.toLocaleDateString('en-US', { month: 'short' })
    let futureYear = date.getFullYear()
    let dateToAssert = `${futureMonthShort} ${futureDay}, ${futureYear}`

    // M·ªü √¥ datepicker
    cy.get('[placeholder="Form Picker"]').then(input => {
      cy.wrap(input).click()

      // ƒê·ªá quy ch·ªçn ƒë√∫ng th√°ng/nƒÉm r·ªìi click ng√†y
      function pickDate() {
        cy.get('nb-calendar-view-mode')
          .invoke('text')
          .then(calendarMonthAndYear => {
            if (
              !calendarMonthAndYear.includes(futureMonthLong) ||
              !calendarMonthAndYear.includes(futureYear)
            ) {
              cy.get('[data-name="chevron-right"]').click()
              pickDate()
            } else {
              cy.get('.day-cell')
                .not('.bounding-month')
                .contains(futureDay)
                .click()
            }
          })
      }

      pickDate()

      // Ki·ªÉm tra gi√° tr·ªã trong input
      cy.wrap(input).should('have.value', dateToAssert)
    })
  }

  // üëâ G·ªçi h√†m: truy·ªÅn v√†o s·ªë ng√†y mu·ªën c·ªông th√™m
  selectDateFromCurrentDay(50) // ch·ªçn ng√†y sau 50 ng√†y
})
